services:
  db:
    image: postgres:17.5-alpine3.21
    container_name: ${DB_HOST}
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - app-net
    volumes:
      - app-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USERNAME}" ]
      interval: 2s
      timeout: 10s
      retries: 10
      start_period: 2s

  backend:
    build:
      context: ../backend
      dockerfile: ../docker/backend.Dockerfile
      no_cache: true
    container_name: api
    restart: always
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - ADMIN_SECRET=${ADMIN_SECRET}
    networks:
      - app-net
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider http://localhost:8080/health" ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 5s

  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend.Dockerfile
      additional_contexts:
        - nginx=../nginx
    restart: always
    networks:
      - app-net
    ports:
      - ${APP_PORT}:80
    depends_on:
      backend:
        condition: service_healthy

networks:
  app-net:
volumes:
  app-data:
