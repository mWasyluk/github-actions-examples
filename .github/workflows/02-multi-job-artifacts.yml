name: 02-multi-job-artifacts

on: 
  push:
    paths:
      - "**02-multi-job-artifacts**"
      - "!**README.md"

env: 
  PROJECT_DIR: 02-multi-job-artifacts
  ARTIFACT_BUILD_NAME: build
  ARTIFACT_IMAGE_NAME: image
  APP_JAR_NAME: app.jar
  JDK_VERSION: 11
  JDK_CONTAINER_WORKDIR: /app
  JDK_CONTAINER_NAME: app-container
  JDK_IMAGE_NAME: eclipse-temurin
  JDK_IMAGE_TAG: 11-jre-alpine

jobs:
  verify-maven:
    runs-on: ubuntu-latest
    steps: 
      - name: Check version
        run: mvn -v
  maven-build-jar:
    runs-on: ubuntu-latest
    steps: 
      - name: Fetch data
        uses: actions/checkout@v4
        with: 
          sparse-checkout: |
            ${{ env.PROJECT_DIR }}
          sparse-checkout-cone-mode: false

      - name: Verify jar absence
        run: ls target/
        continue-on-error: true

      - name: Build JAR package
        run: |
          cd ${{ env.PROJECT_DIR }}
          chmod +x mvn/mvnw
          mvn clean package

      - name: Verify jar presence
        run: ls target/

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with: 
  #         name: build
  #         path: ${{ env.PROJECT_DIR }}/target/${{ env.APP_JAR_NAME }}
                
  # java-run-and-test:
  #   runs-on: ubuntu-latest
  #   needs: maven-build-jar
  #   steps:
  #       - name: Download artifact
  #         uses: actions/download-artifact@v4
  #         with: 
  #           name: ${{ env.ARTIFACT_BUILD_NAME }}

  #       - name: Set up JDK 11
  #         uses: actions/setup-java@v4
  #         with:
  #           java-version: ${{ env.JDK_VERSION }}
  #           distribution: 'temurin'

  #       - name: Run application
  #         run: java -jar ${{ env.APP_JAR_NAME }} | grep -q "Hello"

  # docker-create-image:
  #   runs-on: ubuntu-latest
  #   needs: java-run-and-test
  #   steps:
  #     - name: Run JRE image
  #       run: |
  #         docker run -d \
  #           -w ${{ env.JDK_CONTAINER_WORKDIR }} \
  #           --name ${{ env.JDK_CONTAINER_NAME }} \
  #           ${{ env.JDK_IMAGE_NAME }}:${{ env.JDK_IMAGE_TAG }}

  #     - name: Download build artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ env.ARTIFACT_BUILD_NAME }}

  #     - name: Copy build to container
  #       run: docker cp ${{ env.APP_JAR_NAME }} ${{ env.JDK_CONTAINER_NAME }}:${{ env.JDK_CONTAINER_WORKDIR }}

  #     - name: Create image based on running container
  #       run: |
  #         docker commit \
  #           --change='CMD ["java", "-jar", "${{ env.APP_JAR_NAME }}"]' \
  #           ${{ env.JDK_CONTAINER_NAME }} ${{ env.JDK_CONTAINER_NAME }}

  #     - name: Save image to tar
  #       run: docker save -o "${{ env.ARTIFACT_IMAGE_NAME}}.tar" ${{ env.JDK_CONTAINER_NAME }}

  #     - name: Upload image artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.ARTIFACT_IMAGE_NAME }}
  #         path: "${{ env.ARTIFACT_IMAGE_NAME}}.tar"
        
  # docker-push-image:
  #   runs-on: ubuntu-latest
  #   needs: docker-create-image
  #   steps:
  #     - name: Download image artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ env.ARTIFACT_IMAGE_NAME }}

  #     - name: Load image from tar
  #       run: docker load -i "${{ env.ARTIFACT_IMAGE_NAME}}.tar"

  #     - name: Get push-ready image name
  #       run: echo "DOCKER_IMAGE_FULL_NAME=${{ secrets.DOCKER_USER }}/${GITHUB_REPOSITORY#*/}:${{ env.PROJECT_DIR }}" >> $GITHUB_ENV

  #     - name: Login and push to DockerHub
  #       run: |
  #         echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
  #         docker tag ${{ env.JDK_CONTAINER_NAME }} ${{ env.DOCKER_IMAGE_FULL_NAME }}
  #         docker push ${{ env.DOCKER_IMAGE_FULL_NAME }}
